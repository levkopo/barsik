module DSP
{
  struct KeyVal {
    string key;
    string value;
  };
  typedef sequence<KeyVal> KeyValSeq;

    struct att_entry_t {
        unsigned long band_id;
        unsigned long att;
        unsigned long ChanCount;
        unsigned long minFreq;
        unsigned long maxFreq;
    };

    typedef sequence<att_entry_t> AttEntrySeq;

    struct band_t {
        unsigned long begfreq;
        unsigned long endfreq;
        AttEntrySeq values;
    };

    typedef sequence<band_t> BandSeq;
    typedef sequence<unsigned long> RangeBands_seq;
    typedef sequence<unsigned long> SampleFreqs_seq;
    typedef sequence<unsigned long> Filters_seq;
    typedef sequence<unsigned long> WatchTimes_seq;
    typedef sequence<unsigned long> WinParams_seq;
    typedef sequence<unsigned long> SuperRangeBands_seq;
    typedef sequence<unsigned long> AllGroupRangeBands_seq;

    struct AttenuatorSet {
        BandSeq bands;
    };

    struct MapEntry {
        string key;
        unsigned long value;
    };

    abstract interface SigBoardInfo3 {
        readonly attribute unsigned long IdRcv;
        readonly attribute unsigned long IdCon;
        readonly attribute unsigned long IdSwt;
        readonly attribute Filters_seq filters;
        readonly attribute SampleFreqs_seq simpleFreq;
        readonly attribute RangeBands_seq rangeBands;
        readonly attribute WatchTimes_seq watchTimes;
        readonly attribute WinParams_seq winParams;
        readonly attribute AttenuatorSet attenuator;
        readonly attribute AllGroupRangeBands_seq allGroupRangeBands;
    };
};

module CF
{
    interface AbstractPort {};

    module PortSupplier {
        exception UnknownPort {

        };

        interface Supplier {
            AbstractPort getPort(
                in string type
            ) raises (UnknownPort);
        };
    };

    interface Port: AbstractPort {
        void connectPort(
                    in AbstractPort port,
                    in string type
        ) raises (CF::PortSupplier::UnknownPort);
    };

    interface Resource: AbstractPort, PortSupplier::Supplier {
        DSP::SigBoardInfo3 query(
            in unsigned long a,
            in string type
        );
        oneway void releaseObject();
    };

    interface Application: PortSupplier::Supplier {
        void releaseObject();
    };

    struct AppConfig {
        string task;
        unsigned long a;
        string type;
        unsigned long b;
        unsigned long c;
        string path;
        unsigned long d;
        unsigned long f;
        unsigned long e;
    };

    interface ApplicationFactory {
        CF::Application create(in AppConfig config);
    };
};

module DSP {
    struct Signals {
        unsigned long a;
        unsigned long b;
        unsigned long c;
        unsigned long d;
        unsigned long e;
        unsigned long f;
        unsigned long g;
        unsigned long h;
    };

    struct SignalMessage {
        double frequency;
        double attenuator;
        double width;
        Signals signals_;
        unsigned long aaa;
        unsigned long aab;
        unsigned long aac;
        unsigned long aad;
        unsigned long packetNumber;
        boolean b;
        long c;
        boolean d;
        boolean f;
        double aa;
        double ab;
        double ac;
        unsigned long ae;
        unsigned long af;
        unsigned long ag;
        unsigned long ah;
    };

    interface TransporterCtrlUsesPort_v1: CF::AbstractPort {
        oneway void SendTest();
        oneway void SendSignalMessage(
            in SignalMessage message
        );
    };

    interface TransporterCtrlUsesPort_v2: TransporterCtrlUsesPort_v1 {

    };

    interface TransporterCtrlUsesPort_v3: TransporterCtrlUsesPort_v2 {

        long SendPowerPhaseQuery();
        long SendIQSpectrumQuery();
        long getSigBoardInfo();
        oneway void releaseFifo();
    };

    interface TransporterDataPort: CF::Port {

    };

    module DirFinder {
        interface DirFinderAnswerConsumer: CF::Port {

        };
    };
};