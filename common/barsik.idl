module CF
{
    struct DataType {
        string id;
        any value;
    };

    typedef sequence <DataType> Properties;

    struct DeviceAssignmentType {
        string componentId;
        string assignedDeviceId;
    };

    typedef sequence <DeviceAssignmentType> DeviceAssignmentSequence;
};

module DSP
{
  struct KeyVal {
    string key;
    string value;
  };
  typedef sequence<KeyVal> KeyValSeq;

    struct att_entry_t {
        unsigned long band_id;
        double freq;
    };

    typedef sequence<att_entry_t> AttEntrySeq;

    struct band_t {
        unsigned long id;
        double begfreq;
        double endfreq;
    };

    typedef sequence<band_t> BandSeq;
    typedef sequence<float> Filters_seq; // Точно float

    typedef sequence<float> RangeBands_seq;
    typedef sequence<float> SampleFreqs_seq;
    typedef sequence<float> WatchTimes_seq;
    typedef sequence<float> WinParams_seq;
    typedef sequence<float> SuperRangeBands_seq;
    typedef sequence<float> AllGroupRangeBands_seq;

    struct AttenuatorSet {
        BandSeq bands;
        AttEntrySeq values;
    };

    struct MapEntry {
        string key;
        unsigned long value;
    };

         struct SigBoardInfo3 {
            string IdRcv;
            string IdCon;
            string IdSwt;

            Filters_seq filters; // точно здесь
            SampleFreqs_seq simpleFreq;
            RangeBands_seq rangeBands;
            WatchTimes_seq watchTimes;
            WinParams_seq winParams;
            WinParams_seq idk;
            AttenuatorSet attenuator;
            short a;
            double minFreq;
            double maxFreq;
            AllGroupRangeBands_seq allGroupRangeBands;
        };
};

module CF
{
    interface AbstractPort {};

    module PortSupplier {
        exception UnknownPort {

        };

        interface Supplier {
            AbstractPort getPort(
                in string type
            ) raises (UnknownPort);
        };
    };

    interface Port: AbstractPort {
        void connectPort(
            in Object connection,
            in string connectionId
        ) raises (CF::PortSupplier::UnknownPort);
    };

    interface Resource: AbstractPort, PortSupplier::Supplier {
        void query(inout Properties o);
        oneway void releaseObject();
    };

    interface Application: PortSupplier::Supplier {
        void releaseObject();
    };

    interface ApplicationFactory {
        CF::Application create(
            in string name,
            in Properties initConfiguration,
            in DeviceAssignmentSequence deviceAssignments
        );
    };
};

module DSP {
    struct GenericSignalParams {
        double freq; // Частота в герцах
        short attenuator; // Аттенюатор
        double c;
        double d;
        double f;
        double width; // Ширина спектра в герцах
        float filter; // Используемый фильтр
        float w;
        unsigned long ae;
        unsigned long channel; // Канал
        sequence<octet> octets;
    };

    struct iq {
        float i;
        float q;
    };

    struct short_iq {
        short i;
        short q;
    };

    typedef sequence<iq> IqSeq;
    typedef sequence<short_iq> ShortIqSeq;

    struct PowerPhase {
        sequence<octet> angles;
        sequence<octet> b;
        octet c;
    };

    struct SignalRep {
        octet test;
    };

    struct SignalDataEx {
        ShortIqSeq a;
        IqSeq b;
        IqSeq c;
        PowerPhase power;
        SignalRep rep;
    };

    struct SignalMsg {
        GenericSignalParams params;
        unsigned long a;
        unsigned long b;
        boolean c;
        long d;
        long dd;
        boolean ddd;
        SignalDataEx extended;
        any data;
    };

    interface TransporterCtrlUsesPort: CF::AbstractPort {
        oneway void SendTest();
        oneway void SendSignalMessage(in SignalMsg message);//
    };

    interface TransporterCtrlUsesPort_v1: TransporterCtrlUsesPort {

    };

    interface TransporterCtrlUsesPort_v2: TransporterCtrlUsesPort_v1 {

    };

    interface TransporterCtrlUsesPort_v3: TransporterCtrlUsesPort_v2 {

        long SendPowerPhaseQuery();
        long SendIQSpectrumQuery();
        long getSigBoardInfo();
        oneway void releaseFifo();
    };

    interface TransporterDataPort: CF::Port {

    };

    module DirFinder {
        interface DirFinderAnswerConsumer: CF::Port {

        };
    };
};