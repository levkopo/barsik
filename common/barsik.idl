module CF
{
    struct DataType {
        string id;
        any value;
    };

    typedef sequence <DataType> Properties;

    struct DeviceAssignmentType {
        string componentId;
        string assignedDeviceId;
    };

    typedef sequence <DeviceAssignmentType> DeviceAssignmentSequence;
};

module DSP
{
  struct KeyVal {
    string key;
    string value;
  };
  typedef sequence<KeyVal> KeyValSeq;

    struct att_entry_t {
        unsigned long band_id;
        unsigned long att;
        unsigned long ChanCount;
        unsigned long minFreq;
        unsigned long maxFreq;
    };

//
    struct band_t {
        unsigned long id;
        unsigned long begfreq;
        unsigned long endfreq;
    };

    typedef sequence<band_t> BandSeq;
    typedef sequence<att_entry_t> AttEntrySeq;
    typedef sequence<unsigned long> RangeBands_seq;
    typedef sequence<unsigned long> SampleFreqs_seq;
    typedef sequence<unsigned long> Filters_seq;
    typedef sequence<unsigned long> WatchTimes_seq;
    typedef sequence<unsigned long> WinParams_seq;
    typedef sequence<unsigned long> SuperRangeBands_seq;
    typedef sequence<unsigned long> AllGroupRangeBands_seq;

    struct AttenuatorSet {
        BandSeq bands;
        AttEntrySeq values;
    };

    struct MapEntry {
        string key;
        unsigned long value;
    };

         struct SigBoardInfo3 {
            unsigned long IdRcv;
            unsigned long IdCon;
            unsigned long IdSwt;
            Filters_seq filters;
            SampleFreqs_seq simpleFreq;
            RangeBands_seq rangeBands;
            WatchTimes_seq watchTimes;
            WinParams_seq winParams;
            AttenuatorSet attenuator;
            AllGroupRangeBands_seq allGroupRangeBands;
        };
};

module CF
{
    interface AbstractPort {};

    module PortSupplier {
        exception UnknownPort {

        };

        interface Supplier {
            AbstractPort getPort(
                in string type
            ) raises (UnknownPort);
        };
    };

    interface Port: AbstractPort {
        void connectPort(
            in Object connection,
            in string connectionId
        ) raises (CF::PortSupplier::UnknownPort);
    };

    interface Resource: AbstractPort, PortSupplier::Supplier {
        void query(inout Properties o);
        oneway void releaseObject();
    };

    interface Application: PortSupplier::Supplier {
        void releaseObject();
    };

    interface ApplicationFactory {
        CF::Application create(
            in string name,
            in Properties initConfiguration,
            in DeviceAssignmentSequence deviceAssignments
        );
    };
};

module DSP {
    struct Signals {
        unsigned long a;
        unsigned long b;
        unsigned long c;
        unsigned long d;
        unsigned long e;
        unsigned long f;
        unsigned long g;
        unsigned long h;
    };

    struct SignalMessage {
        double frequency;
        double attenuator;
        double width;
        Signals signals_;
        unsigned long aaa;
        unsigned long aab;
        unsigned long aac;
        unsigned long aad;
        unsigned long packetNumber;
        boolean b;
        long c;
        boolean d;
        boolean f;
        double aa;
        double ab;
        double ac;
        unsigned long ae;
        unsigned long af;
        unsigned long ag;
        unsigned long ah;
    };

    interface TransporterCtrlUsesPort: CF::AbstractPort {
    oneway void SendTest();
            oneway void SendSignalMessage(
                in any message
            );
    };

    interface TransporterCtrlUsesPort_v1: TransporterCtrlUsesPort {

    };

    interface TransporterCtrlUsesPort_v2: TransporterCtrlUsesPort_v1 {

    };

    interface TransporterCtrlUsesPort_v3: TransporterCtrlUsesPort_v2 {

        long SendPowerPhaseQuery();
        long SendIQSpectrumQuery();
        long getSigBoardInfo();
        oneway void releaseFifo();
    };

    interface TransporterDataPort: CF::Port {

    };

    module DirFinder {
        interface DirFinderAnswerConsumer: CF::Port {

        };
    };
};